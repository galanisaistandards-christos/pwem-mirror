name: Deploy static site to Pages

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure Pages
        uses: actions/configure-pages@v5

      # ---------- STAGE SITE ----------
      - name: Stage site (full copy + .nojekyll)
        id: stage
        shell: bash
        run: |
          set -euo pipefail
          site="site"
          rm -rf "$site"
          mkdir -p "$site"

          # index & assets (αν υπάρχουν)
          if [[ -f "index.html" ]]; then
            cp -a index.html "$site/"
          fi
          if [[ -d assets ]]; then
            mkdir -p "$site/assets"
            cp -a assets/. "$site/assets/"
          fi

          # === Η ΔΙΟΡΘΩΣΗ: ΑΝΑΔΡΟΜΙΚΗ ΑΝΤΙΓΡΑΦΗ ΟΛΟΥ ΤΟΥ memory/ ===
          # ΜΗΝ χρησιμοποιήσεις 'memory/**' (δεν είναι recursive χωρίς globstar).
          if [[ -d memory ]]; then
            mkdir -p "$site/memory"
            cp -a memory/. "$site/memory/"
          fi

          # Απενεργοποιεί Jekyll processing
          touch "$site/.nojekyll"

          echo "📦 Staged site to '$site'"

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: site

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      # ---------- SMOKE CHECK ----------
      - name: Smoke-check (multi URL)
        shell: bash
        env:
          BASE_URL: ${{ steps.deployment.outputs.page_url }}
          ATTEMPT: ${{ github.run_number }}
        run: |
          set -euo pipefail

          when="$(date -u '+%Y-%m-%d %H:%M:%S UTC')"

          # Δυναμικά παιχνιδιάρικα emoji: τόσα 🍑 όσα το attempt
          peachs=$(printf '🍑%.0s' $(seq 1 "$ATTEMPT"))

          echo "🌀 Smoke attempt #${ATTEMPT} — ${when} ${peachs}"

          http_code() { curl -sS -o /dev/null -w "%{http_code}" "$1"; }
          body_of()  { curl -sS "$1" || true; }

          poll() {
            local url="$1"
            local expect="${2-}"       # optional substring που πρέπει να υπάρχει στο body

            for i in $(seq 1 40); do   # ~2 λεπτά
              code="$(http_code "$url")"
              if [[ "$code" == "200" ]]; then
                if [[ -z "$expect" ]] || body="$(body_of "$url")" && [[ "$body" == *"$expect"* ]]; then
                  echo "✅ OK: $url"
                  return 0
                fi
              fi
              echo "⏳ try $i: code=$code (want 200)${expect:+; expect body contains '$expect'}"
              sleep 3
            done

            echo "❌ FAIL: $url"
            return 1
          }

          base="${BASE_URL%/}"

          # URLs που ελέγχουμε
          declare -a checks=(
            "Ping|ok|$base/memory/ping.txt"
            "Heartbeat|\"ok\": true|$base/memory/heartbeat.json"
            "Status|\"ok\": true|$base/memory/status.json"
            "Chron-2025 index|PWEM|$base/memory/chron/2025/index.html"
            "Chron-2025-01 index|PWEM|$base/memory/chron/2025/01/index.html"
          )

          failed=0
          for row in "${checks[@]}"; do
            IFS='|' read -r rel expect url <<<"$row"
            echo "🔎 $rel → $url"
            if ! poll "$url" "$expect"; then
              failed=1
            fi
          done

          if [[ "$failed" -ne 0 ]]; then
            echo "💥 Smoke-check failed"
            exit 1
          else
            echo "🎉 Smoke-check passed"
          fi
