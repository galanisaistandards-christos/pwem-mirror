name: Deploy static site to Pages

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Pages
        uses: actions/configure-pages@v5

      # Ανεβάζουμε ΟΛΟ το repo σαν artifact (σερβίρεται ως static)
      - name: Upload full repo to GitHub Pages (artifact path ".")
        uses: actions/upload-pages-artifact@v3
        with:
          path: .

  deploy:
    name: Deploy + Smoke-check
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      # -------------------------------
      # 🔥 Smoke-check μετά το deploy
      # -------------------------------
      - name: Smoke-check (multi URL: ping(s) + index) 🧐
        shell: bash
        env:
          BASE_URL: ${{ steps.deployment.outputs.page_url }}
        run: |
          set -euo pipefail

          # Εκτυπώνουμε «σκυτάλη»: attempt, ώρα, emojis
          attempt="#06"   # <— ΑΥΞΑΝΕΙΣ σε κάθε αλλαγή (για ορατή ιχνηλάτηση) 
          when="$(date -u +'%Y-%m-%d %H:%M:%S UTC')"
          echo "🚀 Smoke attempt ${attempt} @ ${when}"

          # Μικρό helper: GET μόνο status code
          http_code() { curl -s -o /dev/null -w "%{http_code}" "$1"; }

          # poll με retries (40 x 3s ≈ 2 λεπτά)
          poll() {
            local url="$1"
            local expect="${2:-}"
            for i in $(seq 1 40); do
              code="$(http_code "$url")"
              body=""
              if [[ -n "$expect" ]]; then
                body="$(curl -s "$url" || true)"
              fi
              if [[ "$code" == "200" ]]; then
                if [[ -z "$expect" || "$body" == *"$expect"* ]]; then
                  echo "✅ OK: $url"
                  return 0
                fi
              fi
              echo "⏳ Attempt $i: code=$code (expecting 200) ${expect:+and body contains '$expect'}"
              sleep 3
            done
            echo "❌ FAIL: $url"
            return 1
          }

          # 🍑 Δυναμικά ροδακινάκια = αριθμός προσπάθειας (strip το #)
          repeat_peaches(){ n="$1"; out=""; for _ in $(seq 1 "$n"); do out="$out🍑"; done; printf '%s' "$out"; }
          att_no="${attempt#\#}"
          echo "🍑 $(repeat_peaches "$att_no")"

          # URLs & (προαιρετικό) expected body substring
          checks=(
            "memory/chron/2025/ping.txt|ok"
            "memory/ping.txt|ok"
            "memory/heartbeat.json|\"ok\""  # περιέχει "ok"
            "memory/status.json|\"ok\""     # περιέχει "ok"
            "memory/chron/2025/index.html|"
            "index.html|"
          )

          failed=0
          for item in "${checks[@]}"; do
            rel="${item%%|*}"
            exp="${item#*|}"
            url="${BASE_URL%/}/$rel"
            if ! poll "$url" "$exp"; then
              failed=1
            fi
          done

          if [[ "$failed" -ne 0 ]]; then
            echo "💥 Smoke-check failed"
            exit 1
          else
            echo "🎉 Smoke-check passed"
          fi
