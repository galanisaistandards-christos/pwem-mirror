name: GitHub Pages — PWEM

on:
  push:
    branches: [ main ]
    paths:
      - 'memory/**'
      - 'assets/**'
      - '.nojekyll'
      - '.github/workflows/pages.yml'
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: 'pages'
  cancel-in-progress: false

jobs:
  build:
    name: Build static site (_site)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Prepare _site
        run: |
          set -euxo pipefail
          SITE="_site"
          rm -rf "$SITE"
          mkdir -p "$SITE"

          # Ανέβασε ολόκληρο τον φάκελο "memory" στο _site/memory/
          rsync -av --delete ./memory/ "$SITE/memory/"

          # (προαιρετικά) ανέβασε assets αν χρειάζονται
          if [ -d assets ]; then rsync -av --delete ./assets/ "$SITE/assets/"; fi

          # Απενεργοποίηση Jekyll
          touch "$SITE/.nojekyll"

          # Σιγουρευόμαστε ότι το κρίσιμο αρχείο υπάρχει ΠΡΙΝ το upload
          test -f "$SITE/memory/chron/2025/01/index.html"

          echo '--- TREE (πρώτα 4 επίπεδα) ---'
          find "$SITE" -maxdepth 4 -type f | sort

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: _site

  deploy:
    name: Deploy to GitHub Pages
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - id: deployment
        uses: actions/deploy-pages@v4

  smoke:
    name: Post-deploy smoke-check (hard 200)
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Wait for propagation
        run: sleep 20

      - name: Hit critical URLs
        env:
          BASE: https://galanisstandards-christos.github.io/pwem-mirror
        run: |
          set -euo pipefail
          urls=(
            "$BASE/memory/chron/2025/01/index.html"
            "$BASE/memory/heartbeat.json"
            "$BASE/memory/status.json"
          )
          for u in "${urls[@]}"; do
            code=$(curl -s -o /dev/null -w "%{http_code}" "$u")
            echo "$code  $u"
            [ "$code" -eq 200 ] || { echo "Smoke-check failed for $u"; exit 1; }
          done
