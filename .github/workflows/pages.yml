name: GitHub Pages — build & deploy PWEM site

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: pages
  cancel-in-progress: false

jobs:
  build:
    name: Build static site artifact
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Stage site/
        shell: bash
        run: |
          set -euxo pipefail

          # καθαρό staging
          rm -rf site
          mkdir -p site

          # βάλ’ το .nojekyll στη ρίζα του artifact
          touch site/.nojekyll

          # αντιγραφή ΟΛΟΥ του memory/ ΜΕΣΑ σε site/memory/ (preserve tree)
          # --delete για συγχρονισμό, --prune-empty-dirs για καθαρά dirs
          rsync -a --delete --prune-empty-dirs \
            --chmod=Du=rwx,Dgo=rx,Fu=rw,Fgo=r \
            memory/ site/memory/

          # (προαιρετικά) αν έχεις και assets:
          if [ -d assets ]; then
            rsync -a assets/ site/assets/
          fi

          echo "── Staged listing (depth≤3) ──"
          find site -maxdepth 3 -type f | sort

          # sanity checks πριν το upload
          test -f site/memory/ping.txt
          test -f site/memory/heartbeat.json
          test -f site/memory/status.json
          test -f site/memory/chron/2025/01/index.html

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: site

  deploy:
    name: Deploy to GitHub Pages
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deploy.outputs.page_url }}
    outputs:
      page_url: ${{ steps.deploy.outputs.page_url }}
    steps:
      - id: deploy
        uses: actions/deploy-pages@v4

  smoke:
    name: Post-deploy smoke-check (4 URLs)
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Curl 4 endpoints
        env:
          BASE: ${{ needs.deploy.outputs.page_url }}
        shell: bash
        run: |
          set -euo pipefail
          base="${BASE%/}"
          urls=(
            "$base/memory/ping.txt"
            "$base/memory/heartbeat.json"
            "$base/memory/status.json"
            "$base/memory/chron/2025/01/index.html"
          )

          echo "Smoke @ $(date -u +'%Y-%m-%d %H:%M:%S UTC') — ${#urls[@]} checks 🍑"
          fail=0
          for u in "${urls[@]}"; do
            code=$(curl -s -o /dev/null -w '%{http_code}' "$u")
            if [ "$code" = "200" ]; then
              echo "✅ 200  $u"
            else
              echo "❌ $code $u"
              fail=1
            fi
          done
          exit $fail
