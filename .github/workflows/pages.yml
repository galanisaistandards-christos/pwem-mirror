name: Deploy static site to Pages

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v5

      - name: Stage site (copy .nojekyll, assets, FULL memory) 🍑
        shell: bash
        run: |
          set -euxo pipefail
          rm -rf site && mkdir -p site

          # 1) ρίζα: .nojekyll + index.html αν υπάρχει
          if [ -f .nojekyll ]; then cp -a .nojekyll site/.nojekyll; else :; fi
          if [ -f index.html ]; then cp -a index.html site/index.html; fi

          # 2) assets (αν υπάρχουν)
          if [ -d assets ]; then cp -a assets site/assets; fi

          # 3) ΟΛΟ το memory/** με rsync (γρήγορο & αξιόπιστο)
          if [ -d memory ]; then
            rsync -a --delete memory/ site/memory/
          fi

          echo ""
          echo "── Listing key files staged under site/ (για διάγνωση) ──"
          # Δείξε index.html/ .json/ .txt μέχρι βάθος 5
          find site/memory -maxdepth 5 -type f \( -name 'index.html' -o -name '*.json' -o -name '*.txt' \) | sort || true
          echo "──────────────────────────────────────────────────────"

      - name: Upload artifact (site/)
        uses: actions/upload-pages-artifact@v3
        with:
          path: site

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    permissions:
      contents: read
      pages: write
      id-token: write

    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Smoke-check (ping/heartbeat/status/chron) with retries
        shell: bash
        env:
          BASE_URL: ${{ steps.deployment.outputs.page_url }}
        run: |
          set -euo pipefail
          attempt="#11"
          when="$(date -u +'%Y-%m-%d %H:%M:%S UTC')"
          echo "🍑 Smoke attempt ${attempt} — ${when}"

          http_code() { curl -s -o /dev/null -w "%{http_code}" "$1"; }
          poll() {
            local url="$1"; local expect="${2-}"
            for i in $(seq 1 40); do
              code="$(http_code "$url")"
              body=""
              if [[ -n "$expect" ]]; then body="$(curl -s "$url" || true)"; fi
              if [[ "$code" == "200" && ( -z "$expect" || "$body" == *"$expect"* ) ]]; then
                echo "✅ 200 OK  $url"
                return 0
              fi
              echo "⏳ try $i: code=$code — $url"
              sleep 3
            done
            echo "❌ FAIL $url"
            return 1
          }

          base="${BASE_URL}"
          ts="$(date +%s)"

          # γρήγορα health URLs
          poll "$base/memory/ping.txt?t=$ts"           "ok"
          poll "$base/memory/heartbeat.json?t=$ts"     '"ok": true'
          poll "$base/memory/status.json?t=$ts"        '"ok": true'

          # chron index + συγκεκριμένος μήνας
          poll "$base/memory/chron/2025/index.html?t=$ts"
          poll "$base/memory/chron/2025/01/index.html?t=$ts"

          echo "🎉 Smoke-check passed"
