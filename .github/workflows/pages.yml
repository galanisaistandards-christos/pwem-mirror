name: Deploy static site to GitHub Pages

on:
  push:
    branches: [ main ]
  workflow_dispatch:

# Απαραίτητα permissions για GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Ένα run τη φορά για Pages
concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Stage site (copy -> site/)
        shell: bash
        run: |
          set -euo pipefail
          rm -rf site
          mkdir -p site

          # Αντιγραφή root αρχείων αν υπάρχουν
          for f in index.html README.md; do
            [ -f "$f" ] && cp -a "$f" site/ || true
          done

          # Αντιγραφή assets (αν υπάρχει)
          if [ -d assets ]; then
            rsync -a --delete assets/ site/assets/
          fi

          # >>> ΚΡΙΣΙΜΟ: πλήρης αντιγραφή memory/ -> site/memory/
          if [ -d memory ]; then
            rsync -a --delete memory/ site/memory/
          fi

          # Απενεργοποίηση Jekyll
          touch site/.nojekyll

          echo "=== Listing (πρώτα 200 paths) ==="
          find site -maxdepth 4 -type f | sed -n '1,200p'

          # Early check για το προβληματικό path
          if [ -f site/memory/chron/2025/01/index.html ]; then
            echo "✓ Βρέθηκε: site/memory/chron/2025/01/index.html"
          else
            echo "✗ ΔΕΝ βρέθηκε: site/memory/chron/2025/01/index.html"
            # Αν δεν θες να fail-άρει εδώ, σχολίασε την επόμενη γραμμή
            exit 1
          fi

      - name: Upload artifact for Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: site

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    outputs:
      page_url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  smoke:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Post-deploy smoke-check (soft)
        shell: bash
        continue-on-error: true   # κάν' το false όταν σταθεροποιηθεί
        env:
          BASE_URL: ${{ needs.deploy.outputs.page_url }}
        run: |
          set -euo pipefail
          echo "BASE_URL=$BASE_URL"
          urls=(
            "$BASE_URL/memory/ping.txt"
            "$BASE_URL/memory/heartbeat.json"
            "$BASE_URL/memory/status.json"
            "$BASE_URL/memory/chron/2025/index.html"
            "$BASE_URL/memory/chron/2025/01/index.html"
          )
          for u in "${urls[@]}"; do
            code=$(curl -s -o /dev/null -w "%{http_code}" "$u?t=$(date +%s)")
            echo "$code  $u"
          done
