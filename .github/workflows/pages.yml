name: Deploy static site to Pages

on:
  push:
    branches: [ main ]
    paths:
      - ".github/workflows/pages.yml"
      - "memory/**"
      - "assets/**"
      - "index.html"
      - ".nojekyll"
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build:
    name: Build artifact
    runs-on: ubuntu-latest
    steps:
      - name: Check out repo
        uses: actions/checkout@v4

      - name: Configure Pages
        uses: actions/configure-pages@v4

      - name: Stage static site (copy everything we need)
        run: |
          set -euxo pipefail
          rm -rf site
          mkdir -p site

          # 1) Ρίζα index αν υπάρχει
          if [ -f index.html ]; then cp -a index.html site/; fi

          # 2) Όλα τα assets (αν υπάρχουν)
          if [ -d assets ]; then cp -a assets site/; fi

          # 3) ΟΛΟΣ ο φάκελος memory, με πλήρη δενδροειδή δομή
          if [ -d memory ]; then cp -a memory site/; fi

          # 4) Απενεργοποιούμε Jekyll processing
          # (ΠΡΕΠΕΙ να είναι στη ρίζα του site artifact)
          : > site/.nojekyll

      - name: List site (debug)
        run: |
          echo "=== Files staged to site/ ==="
          find site -type f | sort | sed -n '1,400p'

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: site

  deploy:
    name: Deploy to GitHub Pages
    needs: build
    runs-on: ubuntu-latest
    outputs:
      page_url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy
        id: deployment
        uses: actions/deploy-pages@v4

  smoke:
    name: Smoke-check deployed URLs
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Poll a few critical URLs
        env:
          BASE_URL: ${{ needs.deploy.outputs.page_url }}
        run: |
          set -euxo pipefail
          base="${BASE_URL%/}"

          urls=(
            "$base/memory/ping.txt"
            "$base/memory/heartbeat.json"
            "$base/memory/status.json"
            "$base/memory/chron/2025/index.html"
            "$base/memory/chron/2025/01/index.html"
          )

          for u in "${urls[@]}"; do
            echo "→ Checking: $u"
            # 40 retries x 3s ~ 2'
            ok=0
            for i in $(seq 1 40); do
              code=$(curl -s -o /dev/null -w "%{http_code}" "$u?t=$RANDOM")
              if [ "$code" = "200" ]; then ok=1; break; fi
              sleep 3
            done
            if [ $ok -ne 1 ]; then
              echo "✗ FAIL: $u"
              exit 1
            else
              echo "✓ OK: $u"
            fi
          done

          echo "🎉 Smoke-check passed."
